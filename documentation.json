{
    "pipes": [],
    "interfaces": [
        {
            "name": "AccountEditState",
            "id": "interface-AccountEditState-97dededb95499a4624b5610ac47dea16",
            "file": "src/app/component/modal/account-edit/state/account-edit.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface AccountEditState {\n  key: string;\n}\n\nexport function createInitialState(): AccountEditState {\n  return {\n    key: ''\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'account-edit' })\nexport class AccountEditStore extends Store<AccountEditState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AccountIndexState",
            "id": "interface-AccountIndexState-9d46641d1254409ce07a50b626c29254",
            "file": "src/app/component/page/account-index/state/account-index.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\nimport { IAccount } from 'src/app/model/account.model';\n\nexport interface AccountIndexState {\n  accounts: IAccount[];\n  loading: boolean;\n}\n\nexport function createInitialState(): AccountIndexState {\n  return {\n    accounts: [],\n    loading: true\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'account-index' })\nexport class AccountIndexStore extends Store<AccountIndexState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [
                {
                    "name": "accounts",
                    "type": "IAccount[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-19d1792bf186dce14148c18318fd13fa",
            "file": "src/app/state/app.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\nimport { EAccountAuthority, EAccountAuthorityLabel } from '../enum/account-authority.enum';\nimport { IOption } from '../model/option.model';\n\nexport interface AppState {\n  authorityOptions: IOption<EAccountAuthority, EAccountAuthorityLabel>[];\n  loading: boolean;\n}\n\nexport function createInitialState(): AppState {\n  return {\n    authorityOptions: [\n      { value: EAccountAuthority.MEMBER, label: EAccountAuthorityLabel.member },\n      { value: EAccountAuthority.ADMIN, label: EAccountAuthorityLabel.admin }\n    ],\n    loading: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'app' })\nexport class AppStore extends Store<AppState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [
                {
                    "name": "authorityOptions",
                    "type": "IOption<EAccountAuthority, EAccountAuthorityLabel>[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FormState",
            "id": "interface-FormState-3d9587334f40f066a804ddf7c7773673",
            "file": "src/app/component/page/form/state/form.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface FormState {\n  key: string;\n}\n\nexport function createInitialState(): FormState {\n  return {\n    key: ''\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'form' })\nexport class FormStore extends Store<FormState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IAccount",
            "id": "interface-IAccount-7994e3249d52f21387ba226462100025",
            "file": "src/app/model/account.model.ts",
            "type": "interface",
            "sourceCode": "import { EAccountAuthority } from '../enum/account-authority.enum';\nimport { createFirestore, IFirestore } from './firestore.model';\n\nexport interface IAccount extends IFirestore {\n  authority: EAccountAuthority;\n  name: string;\n  email: string;\n}\n\nexport function createAccount(item: Partial<IAccount>): IAccount {\n  return {\n    ...createFirestore(item),\n    authority: item.authority || EAccountAuthority.MEMBER,\n    name: item.name || '',\n    email: item.email || ''\n  };\n}\n",
            "properties": [
                {
                    "name": "authority",
                    "type": "EAccountAuthority",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IFirestore"
        },
        {
            "name": "IFirestore",
            "id": "interface-IFirestore-b8fce49990179fd353d1bd8a3d870988",
            "file": "src/app/model/firestore.model.ts",
            "type": "interface",
            "sourceCode": "export interface IFirestore {\n  id: string;\n  created_at: number;\n  updated_at: number;\n}\n\nexport function createFirestore(item: Partial<IFirestore>): IFirestore {\n  return {\n    id: item.id || '',\n    created_at: item.created_at || 0,\n    updated_at: item.updated_at || 0\n  };\n}\n",
            "properties": [
                {
                    "name": "created_at",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "updated_at",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IMail",
            "id": "interface-IMail-122014e9cecc84c5f87a9dfa1633b4c7",
            "file": "src/app/model/mail.model.ts",
            "type": "interface",
            "sourceCode": "export interface IMail {\n  from?: string;\n  to: string[];\n  cc?: string[];\n  replyTo?: string;\n  message: {\n    subject: string;\n    html: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "cc",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "from",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "replyTo",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "to",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IndexState",
            "id": "interface-IndexState-24f96c810c14b30d1a0d872eb1fcd621",
            "file": "src/app/component/page/index/state/index.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface IndexState {\n  loading: boolean;\n}\n\nexport function createInitialState(): IndexState {\n  return {\n    loading: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'index' })\nexport class IndexStore extends Store<IndexState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IOption",
            "id": "interface-IOption-85396ac950df95043e59acc6c1e700c0",
            "file": "src/app/model/option.model.ts",
            "type": "interface",
            "sourceCode": "export interface IOption<U, T> {\n  value: U;\n  label: T;\n}\n",
            "properties": [
                {
                    "name": "label",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginState",
            "id": "interface-LoginState-19fb9ff95e6e9a01b8dd7136c5b66b44",
            "file": "src/app/component/modal/login/state/login.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface LoginState {\n  key: string;\n}\n\nexport function createInitialState(): LoginState {\n  return {\n    key: ''\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'login' })\nexport class LoginStore extends Store<LoginState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ModalState",
            "id": "interface-ModalState-5797899100e6a733d2fe61c0bbce23c5",
            "file": "src/app/component/modal/state/modal.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface ModalState {\n  opened: boolean;\n}\n\nexport function createInitialState(): ModalState {\n  return {\n    opened: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'modal' })\nexport class ModalStore extends Store<ModalState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [
                {
                    "name": "opened",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "OrderByOp",
            "id": "interface-OrderByOp-626cd25f172e0fdf8adfa39ea1a50569",
            "file": "src/app/builder/firestore-query.builder.ts",
            "type": "interface",
            "sourceCode": "import * as firebase from 'firebase/app';\nimport { IFirestore } from '../model/firestore.model';\n\ninterface WhereOp<T extends IFirestore> {\n  field: keyof T;\n  operator: firebase.default.firestore.WhereFilterOp;\n  value: any;\n}\n\ninterface OrderByOp<T extends IFirestore> {\n  field: keyof T;\n  direction: firebase.default.firestore.OrderByDirection;\n}\n\nexport class FirestoreQueryBuilder<T extends IFirestore> {\n  private _startAfter?: string;\n  private _limit = 10;\n  private _where: WhereOp<T>[] = [];\n  private _orderBy: OrderByOp<T> = {\n    field: 'id',\n    direction: 'asc'\n  };\n\n  get field() {\n    return this._orderBy.field;\n  }\n\n  limit(value: number) {\n    this._limit = value;\n    return this;\n  }\n\n  orderBy(field: keyof T, direction: firebase.default.firestore.OrderByDirection = 'desc') {\n    this._orderBy = { field, direction };\n    return this;\n  }\n\n  equalWhere<K extends keyof T>(field: keyof T, value: T[K]) {\n    this._where.push({ field, operator: '==', value });\n    return this;\n  }\n\n  notEqualWhere<K extends keyof T>(field: keyof T, value: T[K]) {\n    this._where.push({ field, operator: '!=', value });\n    return this;\n  }\n\n  startAfter(value: string) {\n    this._startAfter = value;\n    return this;\n  }\n\n  build(query: firebase.default.firestore.Query<T>): firebase.default.firestore.Query<T> {\n    query = query.orderBy(this._orderBy.field as string, this._orderBy.direction);\n    if (this._startAfter) {\n      query = query.startAfter(this._startAfter);\n    }\n    if (this._limit) {\n      query = query.limit(this._limit);\n    }\n    this._where.forEach(where => (query = query.where(where.field as string, where.operator, where.value)));\n    return query;\n  }\n}\n",
            "properties": [
                {
                    "name": "direction",
                    "type": "firebase.default.firestore.OrderByDirection",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "field",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SigninState",
            "id": "interface-SigninState-5845bc1010c796e4e12dc54f35ebd1ad",
            "file": "src/app/component/modal/signin/state/signin.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface SigninState {\n  sending: boolean;\n}\n\nexport function createInitialState(): SigninState {\n  return {\n    sending: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'signin' })\nexport class SigninStore extends Store<SigninState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [
                {
                    "name": "sending",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "WhereOp",
            "id": "interface-WhereOp-626cd25f172e0fdf8adfa39ea1a50569",
            "file": "src/app/builder/firestore-query.builder.ts",
            "type": "interface",
            "sourceCode": "import * as firebase from 'firebase/app';\nimport { IFirestore } from '../model/firestore.model';\n\ninterface WhereOp<T extends IFirestore> {\n  field: keyof T;\n  operator: firebase.default.firestore.WhereFilterOp;\n  value: any;\n}\n\ninterface OrderByOp<T extends IFirestore> {\n  field: keyof T;\n  direction: firebase.default.firestore.OrderByDirection;\n}\n\nexport class FirestoreQueryBuilder<T extends IFirestore> {\n  private _startAfter?: string;\n  private _limit = 10;\n  private _where: WhereOp<T>[] = [];\n  private _orderBy: OrderByOp<T> = {\n    field: 'id',\n    direction: 'asc'\n  };\n\n  get field() {\n    return this._orderBy.field;\n  }\n\n  limit(value: number) {\n    this._limit = value;\n    return this;\n  }\n\n  orderBy(field: keyof T, direction: firebase.default.firestore.OrderByDirection = 'desc') {\n    this._orderBy = { field, direction };\n    return this;\n  }\n\n  equalWhere<K extends keyof T>(field: keyof T, value: T[K]) {\n    this._where.push({ field, operator: '==', value });\n    return this;\n  }\n\n  notEqualWhere<K extends keyof T>(field: keyof T, value: T[K]) {\n    this._where.push({ field, operator: '!=', value });\n    return this;\n  }\n\n  startAfter(value: string) {\n    this._startAfter = value;\n    return this;\n  }\n\n  build(query: firebase.default.firestore.Query<T>): firebase.default.firestore.Query<T> {\n    query = query.orderBy(this._orderBy.field as string, this._orderBy.direction);\n    if (this._startAfter) {\n      query = query.startAfter(this._startAfter);\n    }\n    if (this._limit) {\n      query = query.limit(this._limit);\n    }\n    this._where.forEach(where => (query = query.where(where.field as string, where.operator, where.value)));\n    return query;\n  }\n}\n",
            "properties": [
                {
                    "name": "field",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "operator",
                    "type": "firebase.default.firestore.WhereFilterOp",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccountEditQuery",
            "id": "injectable-AccountEditQuery-ccb5e851f8a75cdde0248b9a727d072a",
            "file": "src/app/component/modal/account-edit/state/account-edit.query.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { AccountEditState, AccountEditStore } from './account-edit.store';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountEditQuery extends Query<AccountEditState> {\n  constructor(protected store: AccountEditStore) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "AccountEditStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "AccountEditStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "AccountEditService",
            "id": "injectable-AccountEditService-e58ebcf59f7a66858704cba9d80d37f5",
            "file": "src/app/component/modal/account-edit/state/account-edit.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { AccountEditStore } from './account-edit.store';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountEditService {\n  constructor(private accountEditStore: AccountEditStore, private http: HttpClient) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accountEditStore",
                        "type": "AccountEditStore"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "accountEditStore",
                        "type": "AccountEditStore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AccountEditStore",
            "id": "injectable-AccountEditStore-97dededb95499a4624b5610ac47dea16",
            "file": "src/app/component/modal/account-edit/state/account-edit.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface AccountEditState {\n  key: string;\n}\n\nexport function createInitialState(): AccountEditState {\n  return {\n    key: ''\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'account-edit' })\nexport class AccountEditStore extends Store<AccountEditState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "AccountIndexQuery",
            "id": "injectable-AccountIndexQuery-6029cfb89e8838cbc5936314bbff26c7",
            "file": "src/app/component/page/account-index/state/account-index.query.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { AccountIndexState, AccountIndexStore } from './account-index.store';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountIndexQuery extends Query<AccountIndexState> {\n  constructor(protected store: AccountIndexStore) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "AccountIndexStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "AccountIndexStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "AccountIndexService",
            "id": "injectable-AccountIndexService-324b589d283b587904a51738d28f9517",
            "file": "src/app/component/page/account-index/state/account-index.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "resetStore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "updateAccounts",
                    "args": [
                        {
                            "name": "accounts",
                            "type": "IAccount[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "accounts",
                            "type": "IAccount[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLoading",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ECollection } from 'src/app/enum/collection.enum';\nimport { createAccount, IAccount } from 'src/app/model/account.model';\nimport { FirestoreService } from 'src/app/service/firestore.service';\nimport { AccountIndexStore } from './account-index.store';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountIndexService {\n  constructor(private accountIndexStore: AccountIndexStore, private firestoreService: FirestoreService) {}\n\n  // Firestore\n  getAccounts() {\n    return this.firestoreService.getDocuments(ECollection.ACCOUNT, createAccount);\n  }\n\n  // Akita\n  updateAccounts(accounts: IAccount[]) {\n    this.accountIndexStore.update({ accounts });\n  }\n\n  updateLoading(loading: boolean) {\n    this.accountIndexStore.update({ loading });\n  }\n\n  resetStore() {\n    this.accountIndexStore.reset();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accountIndexStore",
                        "type": "AccountIndexStore"
                    },
                    {
                        "name": "firestoreService",
                        "type": "FirestoreService"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "accountIndexStore",
                        "type": "AccountIndexStore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firestoreService",
                        "type": "FirestoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AccountIndexStore",
            "id": "injectable-AccountIndexStore-9d46641d1254409ce07a50b626c29254",
            "file": "src/app/component/page/account-index/state/account-index.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\nimport { IAccount } from 'src/app/model/account.model';\n\nexport interface AccountIndexState {\n  accounts: IAccount[];\n  loading: boolean;\n}\n\nexport function createInitialState(): AccountIndexState {\n  return {\n    accounts: [],\n    loading: true\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'account-index' })\nexport class AccountIndexStore extends Store<AccountIndexState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "AppQuery",
            "id": "injectable-AppQuery-69cfca9f49ad1211364368650fbed9d3",
            "file": "src/app/state/app.query.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { AppState, AppStore } from './app.store';\n\n@Injectable({ providedIn: 'root' })\nexport class AppQuery extends Query<AppState> {\n  constructor(protected store: AppStore) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "AppStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "AppStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "AppService",
            "id": "injectable-AppService-a340ae86c9e7d2b3eaaf0dd5c40d5445",
            "file": "src/app/state/app.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resetStore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "updateLoading",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AppStore } from './app.store';\n\n@Injectable({ providedIn: 'root' })\nexport class AppService {\n  constructor(private appStore: AppStore) {}\n\n  // Akita\n  updateLoading(loading: boolean) {\n    this.appStore.update({ loading });\n  }\n\n  resetStore() {\n    this.appStore.reset();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appStore",
                        "type": "AppStore"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "appStore",
                        "type": "AppStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AppStore",
            "id": "injectable-AppStore-19d1792bf186dce14148c18318fd13fa",
            "file": "src/app/state/app.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\nimport { EAccountAuthority, EAccountAuthorityLabel } from '../enum/account-authority.enum';\nimport { IOption } from '../model/option.model';\n\nexport interface AppState {\n  authorityOptions: IOption<EAccountAuthority, EAccountAuthorityLabel>[];\n  loading: boolean;\n}\n\nexport function createInitialState(): AppState {\n  return {\n    authorityOptions: [\n      { value: EAccountAuthority.MEMBER, label: EAccountAuthorityLabel.member },\n      { value: EAccountAuthority.ADMIN, label: EAccountAuthorityLabel.admin }\n    ],\n    loading: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'app' })\nexport class AppStore extends Store<AppState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "BinService",
            "id": "injectable-BinService-e0c17170a6c86fe9863d3ec2921594f7",
            "file": "src/app/service/bin.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'https://httpbin.org'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "getStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BinService {\n  url = 'https://httpbin.org';\n\n  constructor(private httpClient: HttpClient) {}\n\n  getStatus(status: number) {\n    return this.httpClient.get(`${this.url}/status/${status}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CheckboxService",
            "id": "injectable-CheckboxService-6dc488c7ec1fb6bd2e9e9fe72242fd0e",
            "file": "src/app/component/atom/checkbox/checkbox.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckboxService {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "FireauthService",
            "id": "injectable-FireauthService-6798c558071fd459d6cf86328d68b18d",
            "file": "src/app/service/fireauth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createAccount",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FireauthService {\n  constructor(private angularFireAuth: AngularFireAuth) {}\n\n  login(email: string, password: string) {\n    return from(this.angularFireAuth.signInWithEmailAndPassword(email, password));\n  }\n\n  logout() {\n    return from(this.angularFireAuth.signOut());\n  }\n\n  getAuthState() {\n    return this.angularFireAuth.authState;\n  }\n\n  createAccount(email: string, password: string) {\n    return from(this.angularFireAuth.createUserWithEmailAndPassword(email, password)).pipe(map(item => item.user.uid));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "angularFireAuth",
                        "type": "AngularFireAuth"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "angularFireAuth",
                        "type": "AngularFireAuth",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FirestoreService",
            "id": "injectable-FirestoreService-5b5c295003c790513e571551ecf721cf",
            "file": "src/app/service/firestore.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteDocument",
                    "args": [
                        {
                            "name": "collection",
                            "type": "ECollection"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "ECollection",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDocument",
                    "args": [
                        {
                            "name": "collection",
                            "type": "ECollection"
                        },
                        {
                            "name": "initFunc",
                            "type": "function",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "Partial<T>"
                                }
                            ]
                        },
                        {
                            "name": "query",
                            "type": "",
                            "defaultValue": "new FirestoreQueryBuilder<T>()"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "ECollection",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "initFunc",
                            "type": "function",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "Partial<T>"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "query",
                            "type": "",
                            "defaultValue": "new FirestoreQueryBuilder<T>()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocument",
                    "args": [
                        {
                            "name": "collection",
                            "type": "ECollection"
                        },
                        {
                            "name": "initFunc",
                            "type": "function",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "Partial<T>"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "ECollection",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "initFunc",
                            "type": "function",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "Partial<T>"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocuments",
                    "args": [
                        {
                            "name": "collection",
                            "type": "ECollection"
                        },
                        {
                            "name": "initFunc",
                            "type": "function",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "Partial<T>"
                                }
                            ]
                        },
                        {
                            "name": "query",
                            "type": "",
                            "defaultValue": "new FirestoreQueryBuilder<T>()"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "ECollection",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "initFunc",
                            "type": "function",
                            "function": [
                                {
                                    "name": "item",
                                    "type": "Partial<T>"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "query",
                            "type": "",
                            "defaultValue": "new FirestoreQueryBuilder<T>()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDocument",
                    "args": [
                        {
                            "name": "collection",
                            "type": "ECollection"
                        },
                        {
                            "name": "data",
                            "type": "Partial<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "ECollection",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "Partial<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTimestamp",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport * as firebase from 'firebase/app';\nimport { EMPTY, from, of, throwError } from 'rxjs';\nimport { expand, map, mergeMap, take } from 'rxjs/operators';\nimport { FirestoreQueryBuilder } from '../builder/firestore-query.builder';\nimport { ECollection } from '../enum/collection.enum';\nimport { EError } from '../enum/error.enum';\nimport { createFirestore, IFirestore } from '../model/firestore.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirestoreService {\n  constructor(private angularFirestore: AngularFirestore) {}\n\n  updateTimestamp<T>(item: Partial<T> & Partial<IFirestore>): Partial<T> {\n    const now = new Date().getTime();\n    item.updated_at = now;\n    if (!item.id) {\n      item.id = this.angularFirestore.createId();\n      item.created_at = now;\n    }\n    return item as T;\n  }\n\n  getDocuments<T extends IFirestore>(collection: ECollection, initFunc: (item: Partial<T>) => T, query = new FirestoreQueryBuilder<T>()) {\n    return this.angularFirestore\n      .collection<T>(collection, ref => query.build(ref as firebase.default.firestore.CollectionReference<T>))\n      .valueChanges()\n      .pipe(map(items => items.map(item => initFunc(item))));\n  }\n\n  getAllDocument<T extends IFirestore>(collection: ECollection, initFunc: (item: Partial<T>) => T, query = new FirestoreQueryBuilder<T>()) {\n    return this.getDocuments(collection, initFunc, query).pipe(\n      take(1),\n      expand(arts =>\n        arts.length\n          ? this.getDocuments(collection, initFunc, query.startAfter(arts[arts.length - 1][query.field + '']).limit(100)).pipe(take(1))\n          : EMPTY\n      ),\n      mergeMap(items => from(items))\n    );\n  }\n\n  getDocument<T extends IFirestore>(collection: ECollection, initFunc: (item: Partial<T>) => T, id: string) {\n    return this.angularFirestore\n      .doc<T>(`${collection}/${id}`)\n      .valueChanges()\n      .pipe(\n        mergeMap(item => (item ? of(item) : throwError(EError.E404))),\n        map(item => initFunc(item))\n      );\n  }\n\n  setDocument<T extends IFirestore>(collection: ECollection, data: Partial<T>) {\n    const item = this.updateTimestamp<T>(data);\n    return from(this.angularFirestore.doc(`${collection}/${item.id}`).set(item, { merge: true })).pipe(map(() => createFirestore(item)));\n  }\n\n  deleteDocument(collection: ECollection, id: string) {\n    return from(this.angularFirestore.doc(`${collection}/${id}`).delete());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "angularFirestore",
                        "type": "AngularFirestore"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "angularFirestore",
                        "type": "AngularFirestore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FormQuery",
            "id": "injectable-FormQuery-c112cd361a5e36f77ab5e60ef6be07c7",
            "file": "src/app/component/page/form/state/form.query.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { FormState, FormStore } from './form.store';\n\n@Injectable({ providedIn: 'root' })\nexport class FormQuery extends Query<FormState> {\n  constructor(protected store: FormStore) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "FormStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "FormStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "FormService",
            "id": "injectable-FormService-e7b30a7a7f0d3b399bc2eb47c6f2a467",
            "file": "src/app/component/page/form/state/form.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormStore } from './form.store';\n\n@Injectable({ providedIn: 'root' })\nexport class FormService {\n  constructor(private formStore: FormStore) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formStore",
                        "type": "FormStore"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "formStore",
                        "type": "FormStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FormStore",
            "id": "injectable-FormStore-3d9587334f40f066a804ddf7c7773673",
            "file": "src/app/component/page/form/state/form.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface FormState {\n  key: string;\n}\n\nexport function createInitialState(): FormState {\n  return {\n    key: ''\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'form' })\nexport class FormStore extends Store<FormState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "IndexQuery",
            "id": "injectable-IndexQuery-0de350a7886a2a5a4058a3edfe945974",
            "file": "src/app/component/page/index/state/index.query.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { IndexState, IndexStore } from './index.store';\n\n@Injectable({ providedIn: 'root' })\nexport class IndexQuery extends Query<IndexState> {\n  constructor(protected store: IndexStore) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "IndexStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "IndexStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "IndexService",
            "id": "injectable-IndexService-760cdcfc653e58cfce693dc1d31f4730",
            "file": "src/app/component/page/index/state/index.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resetStore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "updateLoading",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IndexStore } from './index.store';\n\n@Injectable({ providedIn: 'root' })\nexport class IndexService {\n  constructor(private indexStore: IndexStore) {}\n\n  // Akita\n  updateLoading(loading: boolean) {\n    this.indexStore.update({ loading });\n  }\n\n  resetStore() {\n    this.indexStore.reset();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "indexStore",
                        "type": "IndexStore"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "indexStore",
                        "type": "IndexStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IndexStore",
            "id": "injectable-IndexStore-24f96c810c14b30d1a0d872eb1fcd621",
            "file": "src/app/component/page/index/state/index.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface IndexState {\n  loading: boolean;\n}\n\nexport function createInitialState(): IndexState {\n  return {\n    loading: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'index' })\nexport class IndexStore extends Store<IndexState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "LoginQuery",
            "id": "injectable-LoginQuery-15ab9fcaa9beba97e0cdb8c129909831",
            "file": "src/app/component/modal/login/state/login.query.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { LoginState, LoginStore } from './login.store';\n\n@Injectable({ providedIn: 'root' })\nexport class LoginQuery extends Query<LoginState> {\n  constructor(protected store: LoginStore) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "LoginStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "LoginStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-0b7a6ca32558e23b11a14c122f8980bc",
            "file": "src/app/component/modal/login/state/login.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { LoginStore } from './login.store';\n\n@Injectable({ providedIn: 'root' })\nexport class LoginService {\n  constructor(private loginStore: LoginStore, private http: HttpClient) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "loginStore",
                        "type": "LoginStore"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "loginStore",
                        "type": "LoginStore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginStore",
            "id": "injectable-LoginStore-19fb9ff95e6e9a01b8dd7136c5b66b44",
            "file": "src/app/component/modal/login/state/login.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface LoginState {\n  key: string;\n}\n\nexport function createInitialState(): LoginState {\n  return {\n    key: ''\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'login' })\nexport class LoginStore extends Store<LoginState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "ModalLayoutService",
            "id": "injectable-ModalLayoutService-920581c4a349cbed609f305aab161c6c",
            "file": "src/app/component/template/modal-layout/modal-layout.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalLayoutService {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "ModalQuery",
            "id": "injectable-ModalQuery-ca3eaa09cc84829878e6b7ec73bc7603",
            "file": "src/app/component/modal/state/modal.query.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { ModalState, ModalStore } from './modal.store';\n\n@Injectable({ providedIn: 'root' })\nexport class ModalQuery extends Query<ModalState> {\n  constructor(protected store: ModalStore) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "ModalStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "ModalStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-8b13758a581b3c496eed49937c100e3e",
            "file": "src/app/component/modal/state/modal.service.ts",
            "properties": [
                {
                    "name": "component",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "submit$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "vcr",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetStore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "updateOpened",
                    "args": [
                        {
                            "name": "opened",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "opened",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ComponentFactoryResolver, Injectable, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ModalStore } from './modal.store';\n\n@Injectable({ providedIn: 'root' })\nexport class ModalService {\n  vcr: ViewContainerRef;\n  component = null;\n  submit$: Subject<void> = new Subject();\n\n  constructor(private modalStore: ModalStore, private resolver: ComponentFactoryResolver) {}\n\n  open(data) {\n    if (!data) {\n      return;\n    }\n    const factory = this.resolver.resolveComponentFactory(data);\n    const component = this.vcr.createComponent(factory);\n    if (this.component) {\n      this.component.destroy();\n    }\n    this.updateOpened(true);\n    this.component = component;\n  }\n\n  close() {\n    this.resetStore();\n    this.component.destroy();\n  }\n\n  submit() {\n    this.submit$.next();\n  }\n\n  // Akita\n  updateOpened(opened: boolean) {\n    this.modalStore.update({ opened });\n  }\n\n  resetStore() {\n    this.modalStore.reset();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalStore",
                        "type": "ModalStore"
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "modalStore",
                        "type": "ModalStore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModalStore",
            "id": "injectable-ModalStore-5797899100e6a733d2fe61c0bbce23c5",
            "file": "src/app/component/modal/state/modal.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface ModalState {\n  opened: boolean;\n}\n\nexport function createInitialState(): ModalState {\n  return {\n    opened: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'modal' })\nexport class ModalStore extends Store<ModalState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "OptionService",
            "id": "injectable-OptionService-7e3151d1bc4dbc06eabed430520147b1",
            "file": "src/app/component/option.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OptionService {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "RadioboxService",
            "id": "injectable-RadioboxService-8e514866447b31715f292316fa9d6a37",
            "file": "src/app/component/atom/radiobox/radiobox.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RadioboxService {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "SentryService",
            "id": "injectable-SentryService-39600e13a4d5417181230258df109140",
            "file": "src/app/service/sentry.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "account",
                            "type": "IAccount"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "IAccount",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ErrorHandler, Injectable } from '@angular/core';\nimport * as Sentry from '@sentry/angular';\nimport { IAccount } from '../model/account.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SentryService implements ErrorHandler {\n  constructor() {}\n\n  handleError(error: any) {\n    console.error('ErrorHandler', error);\n    Sentry.captureException(error.error || error.message || error.originalError || error);\n  }\n\n  setUser(account: IAccount) {\n    Sentry.setUser(account ? { id: account.id, email: account.email, username: account.name, authority: account.authority } : null);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "SigninQuery",
            "id": "injectable-SigninQuery-d2b73a6e722c12ce345c452744c74e0e",
            "file": "src/app/component/modal/signin/state/signin.query.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { SigninState, SigninStore } from './signin.store';\n\n@Injectable({ providedIn: 'root' })\nexport class SigninQuery extends Query<SigninState> {\n  constructor(protected store: SigninStore) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "SigninStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "SigninStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "SigninService",
            "id": "injectable-SigninService-83547f7dfe4a84bd471a55b4fe69b93b",
            "file": "src/app/component/modal/signin/state/signin.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createAccount",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetStore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "setAccount",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSending",
                    "args": [
                        {
                            "name": "sending",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "sending",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ECollection } from 'src/app/enum/collection.enum';\nimport { createAccount } from 'src/app/model/account.model';\nimport { FireauthService } from 'src/app/service/fireauth.service';\nimport { FirestoreService } from 'src/app/service/firestore.service';\nimport { SigninStore } from './signin.store';\n\n@Injectable({ providedIn: 'root' })\nexport class SigninService {\n  constructor(private signinStore: SigninStore, private fireauthService: FireauthService, private firestoreService: FirestoreService) {}\n\n  // Fireauth\n  createAccount(value) {\n    const { email, password } = value;\n    return this.fireauthService.createAccount(email, password);\n  }\n\n  // Firestore\n  setAccount(accountId: string, value) {\n    const { name, email } = value;\n    return this.firestoreService.setDocument(\n      ECollection.ACCOUNT,\n      createAccount({ id: accountId, created_at: new Date().getTime(), name, email })\n    );\n  }\n\n  // Akita\n  updateSending(sending: boolean) {\n    this.signinStore.update({ sending });\n  }\n\n  resetStore() {\n    this.signinStore.reset();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "signinStore",
                        "type": "SigninStore"
                    },
                    {
                        "name": "fireauthService",
                        "type": "FireauthService"
                    },
                    {
                        "name": "firestoreService",
                        "type": "FirestoreService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "signinStore",
                        "type": "SigninStore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fireauthService",
                        "type": "FireauthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firestoreService",
                        "type": "FirestoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SigninStore",
            "id": "injectable-SigninStore-5845bc1010c796e4e12dc54f35ebd1ad",
            "file": "src/app/component/modal/signin/state/signin.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface SigninState {\n  sending: boolean;\n}\n\nexport function createInitialState(): SigninState {\n  return {\n    sending: false\n  };\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'signin' })\nexport class SigninStore extends Store<SigninState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "extends": "Store",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FirestoreQueryBuilder",
            "id": "class-FirestoreQueryBuilder-626cd25f172e0fdf8adfa39ea1a50569",
            "file": "src/app/builder/firestore-query.builder.ts",
            "type": "class",
            "sourceCode": "import * as firebase from 'firebase/app';\nimport { IFirestore } from '../model/firestore.model';\n\ninterface WhereOp<T extends IFirestore> {\n  field: keyof T;\n  operator: firebase.default.firestore.WhereFilterOp;\n  value: any;\n}\n\ninterface OrderByOp<T extends IFirestore> {\n  field: keyof T;\n  direction: firebase.default.firestore.OrderByDirection;\n}\n\nexport class FirestoreQueryBuilder<T extends IFirestore> {\n  private _startAfter?: string;\n  private _limit = 10;\n  private _where: WhereOp<T>[] = [];\n  private _orderBy: OrderByOp<T> = {\n    field: 'id',\n    direction: 'asc'\n  };\n\n  get field() {\n    return this._orderBy.field;\n  }\n\n  limit(value: number) {\n    this._limit = value;\n    return this;\n  }\n\n  orderBy(field: keyof T, direction: firebase.default.firestore.OrderByDirection = 'desc') {\n    this._orderBy = { field, direction };\n    return this;\n  }\n\n  equalWhere<K extends keyof T>(field: keyof T, value: T[K]) {\n    this._where.push({ field, operator: '==', value });\n    return this;\n  }\n\n  notEqualWhere<K extends keyof T>(field: keyof T, value: T[K]) {\n    this._where.push({ field, operator: '!=', value });\n    return this;\n  }\n\n  startAfter(value: string) {\n    this._startAfter = value;\n    return this;\n  }\n\n  build(query: firebase.default.firestore.Query<T>): firebase.default.firestore.Query<T> {\n    query = query.orderBy(this._orderBy.field as string, this._orderBy.direction);\n    if (this._startAfter) {\n      query = query.startAfter(this._startAfter);\n    }\n    if (this._limit) {\n      query = query.limit(this._limit);\n    }\n    this._where.forEach(where => (query = query.where(where.field as string, where.operator, where.value)));\n    return query;\n  }\n}\n",
            "properties": [
                {
                    "name": "_limit",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_orderBy",
                    "defaultValue": "{\n    field: 'id',\n    direction: 'asc'\n  }",
                    "type": "OrderByOp<T>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_startAfter",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_where",
                    "defaultValue": "[]",
                    "type": "WhereOp<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "query",
                            "type": "firebase.default.firestore.Query<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "firebase.default.firestore.Query<T>",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "firebase.default.firestore.Query<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equalWhere",
                    "args": [
                        {
                            "name": "field",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "limit",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notEqualWhere",
                    "args": [
                        {
                            "name": "field",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderBy",
                    "args": [
                        {
                            "name": "field",
                            "type": ""
                        },
                        {
                            "name": "direction",
                            "type": "firebase.default.firestore.OrderByDirection",
                            "defaultValue": "'desc'"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "direction",
                            "type": "firebase.default.firestore.OrderByDirection",
                            "defaultValue": "'desc'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startAfter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "field": {
                    "name": "field",
                    "getSignature": {
                        "name": "field",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccountEditComponent",
            "id": "component-AccountEditComponent-2f690cc9c0c6491478f23e7c07629487",
            "file": "src/app/component/modal/account-edit/account-edit.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-edit",
            "styleUrls": [
                "./account-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-account-edit',\n  templateUrl: './account-edit.component.html',\n  styleUrls: ['./account-edit.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AccountEditComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>account-edit works!</p>\n"
        },
        {
            "name": "AccountIndexComponent",
            "id": "component-AccountIndexComponent-7b4620e55d78bca0dd0577eae361d879",
            "file": "src/app/component/page/account-index/account-index.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-index",
            "styleUrls": [
                "./account-index.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-index.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "appQuery",
                    "type": "AppQuery",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dateFormat",
                    "defaultValue": "EDateFormat.DAYTIME",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "formGroup",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "query",
                    "type": "AccountIndexQuery",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getAuthorityLabel",
                    "args": [
                        {
                            "name": "authority",
                            "type": "EAccountAuthority"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "authority",
                            "type": "EAccountAuthority",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { EAccountAuthority, EAccountAuthorityLabel } from 'src/app/enum/account-authority.enum';\nimport { EDateFormat } from 'src/app/enum/date-format.enum';\nimport { AppQuery } from 'src/app/state/app.query';\nimport { AccountIndexQuery } from './state/account-index.query';\nimport { AccountIndexService } from './state/account-index.service';\n\n@Component({\n  selector: 'app-account-index',\n  templateUrl: './account-index.component.html',\n  styleUrls: ['./account-index.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AccountIndexComponent implements OnInit, OnDestroy {\n  formGroup: FormGroup;\n  accountSubscription: Subscription;\n  dateFormat = EDateFormat.DAYTIME;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public appQuery: AppQuery,\n    private service: AccountIndexService,\n    public query: AccountIndexQuery\n  ) {\n    this.formGroup = this.formBuilder.group({ authority: '' });\n  }\n\n  ngOnInit(): void {\n    this.accountSubscription = this.service.getAccounts().subscribe(accounts => {\n      this.service.updateAccounts(accounts);\n      this.service.updateLoading(false);\n    });\n  }\n\n  ngOnDestroy() {\n    this.service.resetStore();\n  }\n\n  getAuthorityLabel(authority: EAccountAuthority) {\n    return EAccountAuthorityLabel[authority] || '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n.accountIndex {\n}\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 500px;\n}\n.search {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  &__wrapper {\n  }\n}\n.table {\n  margin-top: 20px;\n}\n",
                    "styleUrl": "./account-index.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "appQuery",
                        "type": "AppQuery"
                    },
                    {
                        "name": "service",
                        "type": "AccountIndexService"
                    },
                    {
                        "name": "query",
                        "type": "AccountIndexQuery"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appQuery",
                        "type": "AppQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "AccountIndexService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "query",
                        "type": "AccountIndexQuery",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"accountIndex\" *ngIf=\"query.select() | async as state\">\n  <div class=\"search\">\n    <div class=\"search__wrapper\" [formGroup]=\"formGroup\">\n      <app-select\n        label=\"Authority\"\n        blank=\"\"\n        [options]=\"appQuery.select('authorityOptions') | async\"\n        formControlName=\"authority\"\n      ></app-select>\n    </div>\n    <div class=\"search__wrapper\"></div>\n  </div>\n  <ng-container *ngIf=\"state.loading\">\n    <div class=\"loading\">\n      <app-loading></app-loading>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"!state.loading\">\n    <table class=\"table\">\n      <tr>\n        <th>ID</th>\n        <th>CREATED_AT</th>\n        <th>UPDATED_AT</th>\n        <th>NAME</th>\n        <th>EMAIL</th>\n        <th>AUTHORITY</th>\n        <th></th>\n      </tr>\n      <tr *ngFor=\"let account of state.accounts\">\n        <td>{{ account.id }}</td>\n        <td>{{ account.created_at?.toDate() | date: dateFormat }}</td>\n        <td>{{ account.updated_at?.toDate() | date: dateFormat }}</td>\n        <td>{{ account.name }}</td>\n        <td>{{ account.email }}</td>\n        <td>{{ getAuthorityLabel(account.authority) }}</td>\n        <td>\n          <app-option>\n            <p>編集</p>\n            <p class=\"-warning\">削除</p>\n          </app-option>\n        </td>\n      </tr>\n    </table>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-56703334e431618ad4f1943c4f75f536",
            "file": "src/app/app.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faFlag",
                    "defaultValue": "faFlag",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "faUser",
                    "defaultValue": "faUser",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "query",
                    "type": "AppQuery",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "signin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { faFlag, faUser } from '@fortawesome/pro-duotone-svg-icons';\nimport { LoginComponent } from './component/modal/login/login.component';\nimport { SigninComponent } from './component/modal/signin/signin.component';\nimport { ModalService } from './component/modal/state/modal.service';\nimport { AppQuery } from './state/app.query';\nimport { AppService } from './state/app.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  faFlag = faFlag;\n  faUser = faUser;\n\n  constructor(public query: AppQuery, private service: AppService, private modalService: ModalService) {}\n\n  ngOnInit() {}\n\n  ngOnDestroy() {\n    this.service.resetStore();\n  }\n\n  signin() {\n    this.modalService.open(SigninComponent);\n  }\n\n  login() {\n    this.modalService.open(LoginComponent);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../scss/import.scss';\n\n.app {\n  position: relative;\n  &__side {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: $sideWidth;\n    height: 100vh;\n    background: white;\n    box-shadow: 0 3px 20px rgba(0, 36, 47, 0.1);\n    z-index: 10;\n  }\n  &__content {\n    position: relative;\n    margin-left: $sideWidth;\n    padding: 20px;\n    z-index: 1;\n  }\n}\n.logo {\n  padding: 24px 0;\n  a {\n    display: block;\n    line-height: 1;\n    font-size: 18px;\n    text-align: center;\n    font-weight: bold;\n    color: $brandColor;\n  }\n}\n.menu {\n  &__list {\n    display: block;\n    position: relative;\n    line-height: 60px;\n    padding-left: 52px;\n    font-weight: bold;\n    color: #5f6c72;\n    fa-duotone-icon {\n      position: absolute;\n      top: 0;\n      left: 20px;\n      width: 26px;\n      font-size: 23px;\n      text-align: center;\n    }\n    &.-on {\n      color: $brandColor;\n      background: rgba($brandColor, 0.13);\n    }\n  }\n}\n.account {\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "query",
                        "type": "AppQuery"
                    },
                    {
                        "name": "service",
                        "type": "AppService"
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "query",
                        "type": "AppQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"app\" *ngIf=\"query.select() | async as state\">\n  <div class=\"app__side\">\n    <div class=\"logo\"><a routerLink=\"/\">Angular Template</a></div>\n    <div class=\"menu\">\n      <a class=\"menu__list\" routerLink=\"/\" routerLinkActive=\"-on\" [routerLinkActiveOptions]=\"{ exact: true }\"\n        ><fa-duotone-icon [icon]=\"faFlag\"></fa-duotone-icon>TOP</a\n      >\n      <a class=\"menu__list\" routerLink=\"/account\" routerLinkActive=\"-on\"><fa-duotone-icon [icon]=\"faUser\"></fa-duotone-icon>ACCOUNT</a>\n    </div>\n    <div class=\"account\"></div>\n  </div>\n  <div class=\"app__content\">\n    <router-outlet></router-outlet>\n  </div>\n  <app-modal></app-modal>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3d89cf8d804e3a2ca2bc519d5022fdcd-1",
            "file": "src/app/component/atom/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 11
                },
                {
                    "name": "popup",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "line": 10
                }
            ],
            "outputsClass": [
                {
                    "name": "clickButton",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonComponent implements OnInit {\n  @Input() type = 'default';\n  @Input() disabled = false;\n  @Input() popup = '';\n\n  @Output() clickButton = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  click() {\n    this.clickButton.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n::ng-deep app-button {\n  display: table;\n}\n\n.button {\n  position: relative;\n  &__popup {\n    position: absolute;\n    bottom: 34px;\n    left: 50%;\n    line-height: 1.4;\n    padding: 6px 12px;\n    font-size: 12px;\n    text-align: center;\n    white-space: pre;\n    color: white;\n    background: #191919;\n    border-radius: 6px;\n    transform: translate(-50%, 0);\n    opacity: 0;\n    z-index: 10;\n    pointer-events: none;\n    transition: 0.2s;\n  }\n  &__button {\n    line-height: 30px;\n    padding: 0 18px;\n    font-size: 12px;\n    text-align: center;\n    white-space: nowrap;\n    color: white;\n    background: $brandColor;\n    border-radius: 6px;\n    box-shadow: 0px 3px 6px $shadowColor;\n    transition: 0.3s;\n    cursor: pointer;\n    &::selection {\n      background: none;\n    }\n  }\n  &:hover & {\n    &__popup {\n      opacity: 1;\n    }\n  }\n  &.-flat & {\n    &__button {\n      color: #8f9cb1;\n      background: none;\n      box-shadow: none;\n      &:hover {\n        background: rgba(#8f9cb1, 0.08);\n      }\n    }\n  }\n  &.-disabled {\n    pointer-events: none;\n  }\n  &.-disabled & {\n    &__button {\n      background: #8f9cb1;\n      box-shadow: none;\n    }\n  }\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<div class=\"button\" [ngClass]=\"{ '-flat': type === 'flat', '-disabled': disabled }\">\n  <p class=\"button__popup\" *ngIf=\"popup\">{{ popup }}</p>\n  <p class=\"button__button\" (click)=\"click()\">\n    <ng-content></ng-content>\n  </p>\n</div>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-cd12371e769067128cf86e77e65672be",
            "file": "src/app/component/atom/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "null",
                    "line": 11
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 13,
                    "type": "IOption<any, any>[]"
                },
                {
                    "name": "sub",
                    "defaultValue": "null",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "elements",
                    "defaultValue": "[]",
                    "type": "ElementRef[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'checkbox'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "onTouched",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "changValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, Self, ViewChildren } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NgControl } from '@angular/forms';\nimport { IOption } from 'src/app/model/option.model';\n\n@Component({\n  selector: 'app-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent implements ControlValueAccessor, OnInit {\n  @Input() label = null;\n  @Input() sub = null;\n  @Input() options: IOption<any, any>[] = [];\n\n  @ViewChildren('checkbox') elements: ElementRef[] = [];\n\n  required = false;\n\n  onChange: (value: any) => void;\n  onTouched: (value: any) => void;\n\n  constructor(@Self() public control: NgControl) {\n    this.control.valueAccessor = this;\n  }\n\n  ngOnInit(): void {\n    const validator = this.control.control.validator;\n    this.required = validator ? validator({} as AbstractControl)?.required || false : false;\n  }\n\n  changValue() {\n    this.onChange(\n      this.elements\n        .map(element => element.nativeElement)\n        .filter(element => element.checked)\n        .map(element => element.value)\n    );\n  }\n\n  // ControlValueAccessor\n  writeValue(values: any[]) {\n    setTimeout(() => {\n      this.elements.map(element => element.nativeElement).forEach(element => (element.checked = values.includes(element.value)));\n    });\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n::ng-deep app-checkbox {\n  display: block;\n}\n\n.checkbox {\n  &__label {\n    @include label;\n  }\n  &__sub {\n    @include sub;\n  }\n  &__wrapper {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: flex-start;\n  }\n  &__wrapper-list {\n    position: relative;\n    margin-right: 4px;\n    margin-bottom: 4px;\n    padding: 14px 14px 14px 40px;\n    background: #f2f4f7;\n    border-radius: 4px;\n    cursor: pointer;\n    input {\n      display: none;\n      &:checked {\n        & + p {\n          &::before {\n            background: black;\n          }\n          &::after {\n            border-color: white;\n          }\n        }\n      }\n    }\n    p {\n      display: inline-block;\n      line-height: 1.2;\n      font-size: 14px;\n      color: black;\n      &::before {\n        content: '';\n        position: absolute;\n        top: 14px;\n        left: 10px;\n        width: 16px;\n        height: 16px;\n        background: white;\n        border-radius: 4px;\n      }\n      &::after {\n        content: '';\n        position: absolute;\n        top: 16px;\n        left: 15px;\n        width: 4px;\n        height: 8px;\n        border-right: 2px solid #cecece;\n        border-bottom: 2px solid #cecece;\n        transform: rotate(45deg);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "control",
                        "type": "NgControl"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "control",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "templateData": "<div class=\"checkbox\">\n  <p class=\"checkbox__label\" [class.-required]=\"required\" *ngIf=\"label !== null\">{{ label }}</p>\n  <p class=\"checkbox__sub\" *ngIf=\"sub !== null\">{{ sub }}</p>\n  <div class=\"checkbox__wrapper\">\n    <label class=\"checkbox__wrapper-list\" *ngFor=\"let option of options\">\n      <input #checkbox type=\"checkbox\" [name]=\"control.name\" [value]=\"option.value\" (change)=\"changValue()\" /><p>{{ option.label }}</p>\n    </label>\n  </div>\n</div>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-07ecab07ed22c888b0be605d04978e81",
            "file": "src/app/component/page/form/form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categoryOptions",
                    "defaultValue": "[\n    { value: 'aaa', label: 'AAA' },\n    { value: 'bbb', label: 'BBB' },\n    { value: 'ccc', label: 'CCC' }\n  ]",
                    "type": "IOption<string, string>[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "formGroup",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "genderOptins",
                    "defaultValue": "[\n    { value: 'male', label: 'Male' },\n    { value: 'female', label: 'Female' }\n  ]",
                    "type": "IOption<string, string>[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "createFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "emit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "patchValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IOption } from 'src/app/model/option.model';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormComponent implements OnInit {\n  formGroup: FormGroup;\n  categoryOptions: IOption<string, string>[] = [\n    { value: 'aaa', label: 'AAA' },\n    { value: 'bbb', label: 'BBB' },\n    { value: 'ccc', label: 'CCC' }\n  ];\n  genderOptins: IOption<string, string>[] = [\n    { value: 'male', label: 'Male' },\n    { value: 'female', label: 'Female' }\n  ];\n\n  constructor(private formBuilder: FormBuilder, private changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.createFormGroup();\n    this.patchValue();\n  }\n\n  emit() {\n    this.changeDetectorRef.detectChanges();\n  }\n\n  createFormGroup() {\n    this.formGroup = this.formBuilder.group({\n      category: ['', Validators.required],\n      name: ['', Validators.required],\n      address: ['', Validators.required],\n      body: ['', Validators.required],\n      gender: ['', Validators.required]\n    });\n  }\n\n  submit() {\n    if (this.formGroup.invalid) {\n      this.formGroup.markAllAsTouched();\n      return;\n    }\n  }\n\n  patchValue() {\n    setTimeout(() => {\n      this.formGroup.patchValue({\n        category: 'aaa',\n        name: 'Hayato Wada',\n        address: 'hatoyab@gmail.com',\n        body: `aaaaaa\\nbbbbbbbbb\\ncccccccccccccccc`,\n        gender: 'female'\n      });\n      this.emit();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n.form {\n  padding: 40px 0;\n  &__wrapper {\n    width: $defaultWidth;\n    margin: 0 auto;\n    background: white;\n    border-radius: 4px;\n    box-shadow: 0 0 5px $shadowColor;\n  }\n  &__wrapper-body {\n    padding: 20px;\n    > * {\n      &:not(:first-child) {\n        margin-top: 20px;\n      }\n    }\n  }\n  &__wrapper-foot {\n    display: flex;\n    justify-content: flex-end;\n    padding: 20px;\n    border-top: 1px solid $borderColor;\n    > * {\n      display: block;\n      margin-left: 10px;\n    }\n  }\n}\n.search {\n  display: flex;\n  align-items: flex-end;\n  > * {\n    &:not(:first-child) {\n      margin-left: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form\" [formGroup]=\"formGroup\">\n  <div class=\"form__wrapper\">\n    <div class=\"form__wrapper-body\">\n      <div class=\"search\">\n        <app-select label=\"Category\" blank=\"\" [options]=\"categoryOptions\" formControlName=\"category\"></app-select>\n        <app-text label=\"Name\" formControlName=\"name\"></app-text>\n        <app-text formControlName=\"name\"></app-text>\n        <app-text formControlName=\"name\"></app-text>\n        <app-text label=\"Address\" formControlName=\"address\"></app-text>\n      </div>\n      <app-select label=\"Category\" blank=\"\" [options]=\"categoryOptions\" formControlName=\"category\"></app-select>\n      <app-text label=\"Name\" formControlName=\"name\"></app-text>\n      <app-text label=\"Address\" formControlName=\"address\"></app-text>\n      <app-textarea label=\"Body\" formControlName=\"body\"></app-textarea>\n      <app-radiobox label=\"Gender\" [options]=\"genderOptins\" formControlName=\"gender\"></app-radiobox>\n      <p>{{ formGroup.value | json }}</p>\n    </div>\n    <div class=\"form__wrapper-foot\">\n      <app-button type=\"flat\">Cancel</app-button>\n      <app-button (clickButton)=\"emit()\">Emit</app-button>\n      <app-button [popup]=\"'VALID: ' + formGroup.valid\" (clickButton)=\"submit()\">Submit</app-button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "IndexComponent",
            "id": "component-IndexComponent-19486853bdb758b7e19af42e5582eac4",
            "file": "src/app/component/page/index/index.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-index",
            "styleUrls": [
                "./index.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./index.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "query",
                    "type": "IndexQuery",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { IndexQuery } from './state/index.query';\nimport { IndexService } from './state/index.service';\n\n@Component({\n  selector: 'app-index',\n  templateUrl: './index.component.html',\n  styleUrls: ['./index.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IndexComponent implements OnInit, OnDestroy {\n  constructor(public query: IndexQuery, private service: IndexService) {}\n\n  ngOnInit(): void {}\n\n  ngOnDestroy() {\n    this.service.resetStore();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n.index {\n  @include not-first-child {\n    margin-top: 20px;\n  }\n}\n",
                    "styleUrl": "./index.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "query",
                        "type": "IndexQuery"
                    },
                    {
                        "name": "service",
                        "type": "IndexService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "query",
                        "type": "IndexQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "IndexService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"index\" *ngIf=\"query.select() | async as state\"></div>\n"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-ab4d41ee334f0bd84531c8bc25d72e16",
            "file": "src/app/component/atom/loading/loading.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading",
            "styleUrls": [
                "./loading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faCircleNotch",
                    "defaultValue": "faCircleNotch",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { faCircleNotch } from '@fortawesome/pro-solid-svg-icons';\n\n@Component({\n  selector: 'app-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoadingComponent implements OnInit {\n  faCircleNotch = faCircleNotch;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n.loading {\n  display: block;\n  text-align: center;\n  line-height: 1;\n  font-size: 40px;\n  color: $brandColor;\n}\n",
                    "styleUrl": "./loading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<fa-icon class=\"loading\" [icon]=\"faCircleNotch\" [spin]=\"true\"></fa-icon>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-91214e543072437085ee9d2257349b22",
            "file": "src/app/component/modal/login/login.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoginComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-modal-layout>\n  <ng-container modal-header>Login</ng-container>\n  <ng-container modal-content>\n    <div class=\"login\"></div>\n  </ng-container>\n  <ng-container modal-footer-right>\n    <app-button>Submit</app-button>\n  </ng-container>\n</app-modal-layout>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-dfca1a4380f47af05a8f789198fd29b7",
            "file": "src/app/component/modal/modal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "component",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "store$",
                    "type": "Observable<ModalState>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "vcr",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inner', {read: ViewContainerRef, static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ModalQuery } from './state/modal.query';\nimport { ModalService } from './state/modal.service';\nimport { ModalState } from './state/modal.store';\n\n@Component({\n  selector: 'app-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ModalComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('inner', { read: ViewContainerRef, static: false }) vcr;\n\n  store$: Observable<ModalState>;\n  component = null;\n\n  constructor(private service: ModalService, private query: ModalQuery) {\n    this.store$ = this.query.select();\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.service.vcr = this.vcr;\n  }\n\n  ngOnDestroy() {\n    this.service.resetStore();\n  }\n\n  close() {\n    this.service.close();\n  }\n\n  submit() {\n    this.service.submit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../scss/import.scss';\n\n.modal {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 1000;\n  pointer-events: none;\n  &__filter {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: rgba(#203347, 0.4);\n    opacity: 0;\n    transition: 0.3s;\n    pointer-events: none;\n  }\n  &__content {\n    opacity: 0;\n    transform: scale(0.25);\n    transition: 0.3s;\n    pointer-events: none;\n  }\n  &.-on & {\n    &__filter {\n      opacity: 1;\n      pointer-events: auto;\n    }\n    &__content {\n      opacity: 1;\n      transform: scale(1);\n      pointer-events: auto;\n    }\n  }\n}\n",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ModalService"
                    },
                    {
                        "name": "query",
                        "type": "ModalQuery"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "query",
                        "type": "ModalQuery",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"store$ | async as state\">\n  <div class=\"modal\" [ngClass]=\"{ '-on': state.opened }\">\n    <div class=\"modal__filter\" (click)=\"close()\"></div>\n    <div class=\"modal__content\">\n      <ng-container #inner></ng-container>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "ModalLayoutComponent",
            "id": "component-ModalLayoutComponent-dcfce1d21ce06924a378668e08e6bcc3",
            "file": "src/app/component/template/modal-layout/modal-layout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-layout",
            "styleUrls": [
                "./modal-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "line": 11
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { ModalService } from '../../modal/state/modal.service';\n\n@Component({\n  selector: 'app-modal-layout',\n  templateUrl: './modal-layout.component.html',\n  styleUrls: ['./modal-layout.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ModalLayoutComponent implements OnInit {\n  @Input() loading = false;\n\n  constructor(private modalService: ModalService) {}\n\n  ngOnInit(): void {}\n\n  close() {\n    this.modalService.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n.modalLayout {\n  position: relative;\n  width: 600px;\n  background: white;\n  border-radius: 6px;\n  box-shadow: 0px 3px 12px $shadowColor;\n}\n.heading {\n  line-height: 60px;\n  font-size: 14px;\n  font-weight: bold;\n  text-align: center;\n  border-bottom: 1px solid $borderColor;\n}\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 192px;\n  max-height: calc(80vh - 61px);\n}\n.content {\n  max-height: calc(100vh - 60px - 200px);\n  padding: 24px 30px;\n  overflow-y: scroll;\n}\n.button {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 60px;\n  padding: 0 30px;\n  border-top: 1px solid $borderColor;\n  &__wrapper {\n    display: flex;\n    align-items: center;\n    @include not-first-child {\n      margin-left: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./modal-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <app-modal-layout>\n  <ng-container modal-header></ng-container>\n  <ng-container modal-content></ng-container>\n  <ng-container modal-footer-left></ng-container>\n  <ng-container modal-footer-right></ng-container>\n</app-modal-layout> -->\n\n<div class=\"modalLayout\">\n  <p class=\"heading\">\n    <ng-content select=\"[modal-header]\"></ng-content>\n  </p>\n  <div class=\"loading\" *ngIf=\"loading\">\n    <app-loading></app-loading>\n  </div>\n  <div class=\"content\" [hidden]=\"loading\">\n    <ng-content select=\"[modal-content]\"></ng-content>\n  </div>\n  <div class=\"button\">\n    <div class=\"button__wrapper\">\n      <ng-content select=\"[modal-footer-left]\"></ng-content>\n    </div>\n    <div class=\"button__wrapper\">\n      <app-button type=\"flat\" (clickButton)=\"close()\">Cancel</app-button>\n      <ng-content select=\"[modal-footer-right]\" *ngIf=\"!loading\"></ng-content>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "OptionComponent",
            "id": "component-OptionComponent-8205268d1f573dca0a3544cc59595e5e",
            "file": "src/app/component/atom/option/option.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-option",
            "styleUrls": [
                "./option.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faEllipsisH",
                    "defaultValue": "faEllipsisH",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { faEllipsisH } from '@fortawesome/pro-solid-svg-icons';\n\n@Component({\n  selector: 'app-option',\n  templateUrl: './option.component.html',\n  styleUrls: ['./option.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OptionComponent implements OnInit {\n  faEllipsisH = faEllipsisH;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n.option {\n  display: inline-block;\n  position: relative;\n  &__icon {\n    width: 27px;\n    line-height: 27px;\n    text-align: center;\n    cursor: pointer;\n    fa-icon {\n      display: block;\n      font-size: 14px;\n      color: $grayColor;\n    }\n  }\n  &__menu {\n    position: absolute;\n    bottom: 26px;\n    right: -10px;\n    width: 100px;\n    background: white;\n    border-radius: 6px;\n    box-shadow: 0px 3px 12px $shadowColor;\n    opacity: 0;\n    z-index: 10;\n    pointer-events: none;\n    transition: 0.2s;\n    ::ng-deep {\n      > * {\n        position: relative;\n        line-height: 40px;\n        padding-left: 30px;\n        font-size: 12px;\n        text-align: left;\n        cursor: pointer;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 50%;\n          left: 13px;\n          width: 9px;\n          height: 9px;\n          background: #97a4b7;\n          border-radius: 50%;\n          transform: translate(0, -50%);\n        }\n        &:hover {\n          text-decoration: underline;\n        }\n        &.-warning {\n          &::before {\n            background: $warningColor;\n          }\n        }\n      }\n    }\n  }\n  &:hover & {\n    &__menu {\n      opacity: 1;\n      pointer-events: auto;\n    }\n  }\n}\n",
                    "styleUrl": "./option.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"option\">\n  <div class=\"option__icon\">\n    <fa-icon [icon]=\"faEllipsisH\"></fa-icon>\n  </div>\n  <ul class=\"option__menu\">\n    <ng-content></ng-content>\n  </ul>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RadioboxComponent",
            "id": "component-RadioboxComponent-d57bb8d7a594364d2bc8b002afc45e7a",
            "file": "src/app/component/atom/radiobox/radiobox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-radiobox",
            "styleUrls": [
                "./radiobox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radiobox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "null",
                    "line": 12
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 13,
                    "type": "IOption<any, any>[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "elements",
                    "defaultValue": "[]",
                    "type": "ElementRef[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'radiobox'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "onTouched",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, Input, OnInit, Self, ViewChildren } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NgControl } from '@angular/forms';\nimport { IOption } from 'src/app/model/option.model';\n\n@Component({\n  selector: 'app-radiobox',\n  templateUrl: './radiobox.component.html',\n  styleUrls: ['./radiobox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioboxComponent implements ControlValueAccessor, OnInit {\n  @Input() label = null;\n  @Input() options: IOption<any, any>[] = [];\n\n  @ViewChildren('radiobox') elements: ElementRef[] = [];\n\n  required = false;\n\n  onChange: (value: any) => void;\n  onTouched: (value: any) => void;\n\n  constructor(@Self() public control: NgControl) {\n    this.control.valueAccessor = this;\n  }\n\n  ngOnInit(): void {\n    const validator = this.control.control.validator;\n    this.required = validator ? validator({} as AbstractControl)?.required || false : false;\n  }\n\n  // ControlValueAccessor\n  writeValue(value: any) {\n    this.elements.map(element => element.nativeElement).forEach(element => (element.checked = element.value === value));\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n::ng-deep app-radiobox {\n  display: block;\n}\n\n.radiobox {\n  &__label {\n    @include label;\n  }\n  &__wrapper {\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    @include not-first-child {\n      margin-left: 4px;\n    }\n  }\n  &__wrapper-list {\n    width: 100%;\n    input {\n      display: none;\n      &:checked {\n        & + label {\n          color: white;\n          background: black;\n        }\n      }\n    }\n    label {\n      display: block;\n      width: 100%;\n      line-height: 42px;\n      font-size: 12px;\n      text-align: center;\n      color: black;\n      background: #f2f4f7;\n      border-radius: 4px;\n      cursor: pointer;\n      @include sp-only {\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./radiobox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "control",
                        "type": "NgControl"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "control",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "templateData": "<div class=\"radiobox\">\n  <p class=\"radiobox__label\" [class.-required]=\"required\" *ngIf=\"label !== null\">{{ label }}</p>\n  <div class=\"radiobox__wrapper\">\n    <div class=\"radiobox__wrapper-list\" *ngFor=\"let option of options\">\n      <input\n        #radiobox\n        type=\"radio\"\n        [name]=\"control.name\"\n        [value]=\"option.value\"\n        [id]=\"control.name + option.value\"\n        (input)=\"onChange(radiobox.value)\"\n      /><label [for]=\"control.name + option.value\">{{ option.label }}</label>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-cf479700a43cff71389fca4784ceebcc",
            "file": "src/app/component/atom/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "blank",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 15
                },
                {
                    "name": "label",
                    "defaultValue": "null",
                    "line": 12
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 14,
                    "type": "IOption<any, any>[]"
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "line": 11
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'select'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onTouched",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, Self, ViewChild } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NgControl } from '@angular/forms';\nimport { IOption } from 'src/app/model/option.model';\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements ControlValueAccessor, OnInit {\n  @Input() type = 'default';\n  @Input() label = null;\n  @Input() blank: string = null;\n  @Input() options: IOption<any, any>[] = [];\n  @Input() disabled = false;\n\n  @ViewChild('select') element: ElementRef;\n\n  required = false;\n\n  onChange: (value: any) => void;\n  onTouched: (value: any) => void;\n\n  constructor(@Self() public control: NgControl) {\n    this.control.valueAccessor = this;\n  }\n\n  ngOnInit(): void {\n    const validator = this.control.control.validator;\n    this.required = validator ? validator({} as AbstractControl)?.required || false : false;\n  }\n\n  // ControlValueAccessor\n  writeValue(value: any) {\n    if (this.element) {\n      this.element.nativeElement.value = value;\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n::ng-deep app-select {\n  display: block;\n}\n\n.select {\n  position: relative;\n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 17px;\n    right: 12px;\n    width: 7px;\n    height: 7px;\n    border-right: 1px solid black;\n    border-bottom: 1px solid black;\n    transform: rotate(45deg);\n    pointer-events: none;\n  }\n  select {\n    appearance: none;\n    display: block;\n    width: 100%;\n    height: 40px;\n    padding-left: 12px;\n    padding-right: 27px;\n    font-size: 14px;\n    font-family: $defaultFamily;\n    border: 1px solid $borderColor;\n    cursor: pointer;\n    &.-error {\n      border-color: $warningColor;\n    }\n  }\n  &__label {\n    @include label;\n  }\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "control",
                        "type": "NgControl"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "control",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "templateData": "<div class=\"select\">\n  <p class=\"select__label\" [class.-required]=\"required\" *ngIf=\"label\">{{ label }}</p>\n  <select\n    #select\n    [disabled]=\"!options.length || disabled\"\n    [class.-error]=\"control.touched && control.invalid\"\n    (change)=\"onChange(select.value)\"\n    (blur)=\"onTouched(select.value)\"\n  >\n    <option value=\"\" *ngIf=\"blank !== null\">{{ blank }}</option>\n    <option [value]=\"option.value\" *ngFor=\"let option of options\">{{ option.label }}</option>\n  </select>\n</div>\n"
        },
        {
            "name": "SigninComponent",
            "id": "component-SigninComponent-2a9c614567db12b4d4ea56a174986a06",
            "file": "src/app/component/modal/signin/signin.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signin",
            "styleUrls": [
                "./signin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "query",
                    "type": "SigninQuery",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { mergeMap } from 'rxjs/operators';\nimport { ModalService } from '../state/modal.service';\nimport { SigninQuery } from './state/signin.query';\nimport { SigninService } from './state/signin.service';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SigninComponent implements OnInit, OnDestroy {\n  formGroup: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private service: SigninService,\n    private modalService: ModalService,\n    public query: SigninQuery\n  ) {\n    this.formGroup = this.formBuilder.group({\n      name: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.pattern(/^[a-z\\d]/i), Validators.minLength(6), Validators.maxLength(100)]]\n    });\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy() {\n    this.service.resetStore();\n  }\n\n  submit() {\n    if (this.formGroup.invalid) {\n      this.formGroup.markAllAsTouched();\n      return;\n    }\n    this.service.updateSending(true);\n    this.service\n      .createAccount(this.formGroup.value)\n      .pipe(mergeMap(id => this.service.setAccount(id, this.formGroup.value)))\n      .subscribe({\n        next: () => this.modalService.close(),\n        error: () => this.service.updateSending(false)\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n.signin {\n  @include not-first-child {\n    margin-top: 20px;\n  }\n}\n",
                    "styleUrl": "./signin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "service",
                        "type": "SigninService"
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    },
                    {
                        "name": "query",
                        "type": "SigninQuery"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SigninService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "query",
                        "type": "SigninQuery",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"query.select() | async as state\">\n  <app-modal-layout>\n    <ng-container modal-header>Signin</ng-container>\n    <ng-container modal-content>\n      <div class=\"signin\" [formGroup]=\"formGroup\">\n        <app-text label=\"Name\" formControlName=\"name\"></app-text>\n        <app-text label=\"Email\" formControlName=\"email\"></app-text>\n        <app-text label=\"Password\" formControlName=\"password\"></app-text>\n      </div>\n    </ng-container>\n    <ng-container modal-footer-right>\n      <app-button [disabled]=\"state.sending\" (clickButton)=\"submit()\">Submit</app-button>\n    </ng-container>\n  </app-modal-layout>\n</ng-container>\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-36cf5c9c346d77032b256de9c34dd501",
            "file": "src/app/component/atom/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "null",
                    "line": 11
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textarea'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "onTouched",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, Self, ViewChild } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NgControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-textarea',\n  templateUrl: './textarea.component.html',\n  styleUrls: ['./textarea.component.scss']\n})\nexport class TextareaComponent implements ControlValueAccessor, OnInit {\n  @Input() type = 'default';\n  @Input() label = null;\n  @Input() placeholder = '';\n\n  @ViewChild('textarea') element: ElementRef;\n\n  required = false;\n\n  onChange: (value: any) => void;\n  onTouched: (value: any) => void;\n\n  constructor(@Self() public control: NgControl) {\n    this.control.valueAccessor = this;\n  }\n\n  ngOnInit(): void {\n    const validator = this.control.control.validator;\n    this.required = validator ? validator({} as AbstractControl)?.required || false : false;\n  }\n\n  // ControlValueAccessor\n  writeValue(value: any) {\n    if (this.element) {\n      this.element.nativeElement.value = value;\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n::ng-deep app-textarea {\n  display: block;\n}\n\n.textarea {\n  textarea {\n    appearance: none;\n    width: 100%;\n    height: 120px;\n    padding: 12px;\n    font-size: 14px;\n    font-family: $defaultFamily;\n    border: 1px solid $borderColor;\n    &.-error {\n      border-color: $warningColor;\n    }\n  }\n  &__label {\n    @include label;\n  }\n}\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "control",
                        "type": "NgControl"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "control",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "templateData": "<div class=\"textarea\">\n  <p class=\"textarea__label\" [class.-required]=\"required\" *ngIf=\"label\">{{ label }}</p>\n  <textarea\n    #textarea\n    [class.-error]=\"control.touched && control.invalid\"\n    [placeholder]=\"placeholder\"\n    (input)=\"onChange(textarea.value)\"\n    (blur)=\"onTouched(textarea.value)\"\n  ></textarea>\n</div>\n"
        },
        {
            "name": "TextComponent",
            "id": "component-TextComponent-bafcde0422c82e859727fc5472722114",
            "file": "src/app/component/atom/text/text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text",
            "styleUrls": [
                "./text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "null",
                    "line": 11
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'text'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "onTouched",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, Self, ViewChild } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NgControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-text',\n  templateUrl: './text.component.html',\n  styleUrls: ['./text.component.scss']\n})\nexport class TextComponent implements ControlValueAccessor, OnInit {\n  @Input() type = 'default';\n  @Input() label = null;\n  @Input() placeholder = '';\n\n  @ViewChild('text') element: ElementRef;\n\n  required = false;\n\n  onChange: (value: any) => void;\n  onTouched: (value: any) => void;\n\n  constructor(@Self() public control: NgControl) {\n    this.control.valueAccessor = this;\n  }\n\n  ngOnInit(): void {\n    const validator = this.control.control.validator;\n    this.required = validator ? validator({} as AbstractControl)?.required || false : false;\n  }\n\n  // ControlValueAccessor\n  writeValue(value: any) {\n    if (this.element) {\n      this.element.nativeElement.value = value;\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/import.scss';\n\n::ng-deep app-text {\n  display: block;\n}\n\n.text {\n  input {\n    appearance: none;\n    display: block;\n    width: 100%;\n    height: 40px;\n    padding: 0 12px;\n    font-size: 14px;\n    font-family: $defaultFamily;\n    border: 1px solid $borderColor;\n    &.-error {\n      border-color: $warningColor;\n    }\n  }\n  &__label {\n    @include label;\n  }\n}\n",
                    "styleUrl": "./text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "control",
                        "type": "NgControl"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "control",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "templateData": "<div class=\"text\">\n  <p class=\"text__label\" [class.-required]=\"required\" *ngIf=\"label !== null\">{{ label }}</p>\n  <input\n    #text\n    [placeholder]=\"placeholder\"\n    [class.-error]=\"control.touched && control.invalid\"\n    (input)=\"onChange(text.value)\"\n    (blur)=\"onTouched(text.value)\"\n  />\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CustomInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountEditComponent"
                        },
                        {
                            "name": "AccountIndexComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "IndexComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "ModalLayoutComponent"
                        },
                        {
                            "name": "OptionComponent"
                        },
                        {
                            "name": "RadioboxComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SigninComponent"
                        },
                        {
                            "name": "TextComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyDRLhr6CzG6KrIH0zc0SHqFPVVodWBao5Q',\n    authDomain: 'angular-template-a2ff7.firebaseapp.com',\n    databaseURL: 'https://angular-template-a2ff7.firebaseio.com',\n    projectId: 'angular-template-a2ff7',\n    storageBucket: 'angular-template-a2ff7.appspot.com',\n    messagingSenderId: '91476180592',\n    appId: '1:91476180592:web:e79e4d2eb18afb170f7eb5',\n    measurementId: 'G-0826YHHZ66'\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  firebase: {\n    apiKey: 'AIzaSyDRLhr6CzG6KrIH0zc0SHqFPVVodWBao5Q',\n    authDomain: 'angular-template-a2ff7.firebaseapp.com',\n    databaseURL: 'https://angular-template-a2ff7.firebaseio.com',\n    projectId: 'angular-template-a2ff7',\n    storageBucket: 'angular-template-a2ff7.appspot.com',\n    messagingSenderId: '91476180592',\n    appId: '1:91476180592:web:e79e4d2eb18afb170f7eb5',\n    measurementId: 'G-0826YHHZ66'\n  }\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "createAccount",
                "file": "src/app/model/account.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "item"
                    }
                ],
                "returnType": "IAccount",
                "jsdoctags": [
                    {
                        "name": "item",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createFirestore",
                "file": "src/app/model/firestore.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "item"
                    }
                ],
                "returnType": "IFirestore",
                "jsdoctags": [
                    {
                        "name": "item",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createInitialState",
                "file": "src/app/state/app.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "AppState"
            },
            {
                "name": "createInitialState",
                "file": "src/app/component/modal/state/modal.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "ModalState"
            },
            {
                "name": "createInitialState",
                "file": "src/app/component/modal/login/state/login.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "LoginState"
            },
            {
                "name": "createInitialState",
                "file": "src/app/component/modal/account-edit/state/account-edit.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "AccountEditState"
            },
            {
                "name": "createInitialState",
                "file": "src/app/component/modal/signin/state/signin.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "SigninState"
            },
            {
                "name": "createInitialState",
                "file": "src/app/component/page/account-index/state/account-index.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "AccountIndexState"
            },
            {
                "name": "createInitialState",
                "file": "src/app/component/page/form/state/form.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "FormState"
            },
            {
                "name": "createInitialState",
                "file": "src/app/component/page/index/state/index.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "IndexState"
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "EAccountAuthority",
                "childs": [
                    {
                        "name": "MEMBER",
                        "value": "member"
                    },
                    {
                        "name": "ADMIN",
                        "value": "admin"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enum/account-authority.enum.ts"
            },
            {
                "name": "EAccountAuthorityLabel",
                "childs": [
                    {
                        "name": "member",
                        "value": "Member"
                    },
                    {
                        "name": "admin",
                        "value": "Admin"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enum/account-authority.enum.ts"
            },
            {
                "name": "ECollection",
                "childs": [
                    {
                        "name": "ACCOUNT",
                        "value": "account"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enum/collection.enum.ts"
            },
            {
                "name": "EDateFormat",
                "childs": [
                    {
                        "name": "DEFAULT",
                        "value": "yyyy-MM-dd"
                    },
                    {
                        "name": "DAY",
                        "value": "yyyy年M月d日"
                    },
                    {
                        "name": "DAYTIME",
                        "value": "yyyy年M月d日 HH:mm:ss"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enum/date-format.enum.ts"
            },
            {
                "name": "EError",
                "childs": [
                    {
                        "name": "E400",
                        "value": "e400"
                    },
                    {
                        "name": "E404",
                        "value": "e404"
                    },
                    {
                        "name": "ORDER_ACTIVATED",
                        "value": "order_activated"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enum/error.enum.ts"
            },
            {
                "name": "EErrorMessage",
                "childs": [
                    {
                        "name": "e400",
                        "value": "aiueo"
                    },
                    {
                        "name": "order_activated",
                        "value": "Order Activated"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enum/error.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyDRLhr6CzG6KrIH0zc0SHqFPVVodWBao5Q',\n    authDomain: 'angular-template-a2ff7.firebaseapp.com',\n    databaseURL: 'https://angular-template-a2ff7.firebaseio.com',\n    projectId: 'angular-template-a2ff7',\n    storageBucket: 'angular-template-a2ff7.appspot.com',\n    messagingSenderId: '91476180592',\n    appId: '1:91476180592:web:e79e4d2eb18afb170f7eb5',\n    measurementId: 'G-0826YHHZ66'\n  }\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  firebase: {\n    apiKey: 'AIzaSyDRLhr6CzG6KrIH0zc0SHqFPVVodWBao5Q',\n    authDomain: 'angular-template-a2ff7.firebaseapp.com',\n    databaseURL: 'https://angular-template-a2ff7.firebaseio.com',\n    projectId: 'angular-template-a2ff7',\n    storageBucket: 'angular-template-a2ff7.appspot.com',\n    messagingSenderId: '91476180592',\n    appId: '1:91476180592:web:e79e4d2eb18afb170f7eb5',\n    measurementId: 'G-0826YHHZ66'\n  }\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/model/account.model.ts": [
                {
                    "name": "createAccount",
                    "file": "src/app/model/account.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "item"
                        }
                    ],
                    "returnType": "IAccount",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/model/firestore.model.ts": [
                {
                    "name": "createFirestore",
                    "file": "src/app/model/firestore.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "item"
                        }
                    ],
                    "returnType": "IFirestore",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/app.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/state/app.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "AppState"
                }
            ],
            "src/app/component/modal/state/modal.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/component/modal/state/modal.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "ModalState"
                }
            ],
            "src/app/component/modal/login/state/login.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/component/modal/login/state/login.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "LoginState"
                }
            ],
            "src/app/component/modal/account-edit/state/account-edit.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/component/modal/account-edit/state/account-edit.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "AccountEditState"
                }
            ],
            "src/app/component/modal/signin/state/signin.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/component/modal/signin/state/signin.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "SigninState"
                }
            ],
            "src/app/component/page/account-index/state/account-index.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/component/page/account-index/state/account-index.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "AccountIndexState"
                }
            ],
            "src/app/component/page/form/state/form.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/component/page/form/state/form.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "FormState"
                }
            ],
            "src/app/component/page/index/state/index.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/component/page/index/state/index.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "IndexState"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/enum/account-authority.enum.ts": [
                {
                    "name": "EAccountAuthority",
                    "childs": [
                        {
                            "name": "MEMBER",
                            "value": "member"
                        },
                        {
                            "name": "ADMIN",
                            "value": "admin"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enum/account-authority.enum.ts"
                },
                {
                    "name": "EAccountAuthorityLabel",
                    "childs": [
                        {
                            "name": "member",
                            "value": "Member"
                        },
                        {
                            "name": "admin",
                            "value": "Admin"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enum/account-authority.enum.ts"
                }
            ],
            "src/app/enum/collection.enum.ts": [
                {
                    "name": "ECollection",
                    "childs": [
                        {
                            "name": "ACCOUNT",
                            "value": "account"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enum/collection.enum.ts"
                }
            ],
            "src/app/enum/date-format.enum.ts": [
                {
                    "name": "EDateFormat",
                    "childs": [
                        {
                            "name": "DEFAULT",
                            "value": "yyyy-MM-dd"
                        },
                        {
                            "name": "DAY",
                            "value": "yyyy年M月d日"
                        },
                        {
                            "name": "DAYTIME",
                            "value": "yyyy年M月d日 HH:mm:ss"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enum/date-format.enum.ts"
                }
            ],
            "src/app/enum/error.enum.ts": [
                {
                    "name": "EError",
                    "childs": [
                        {
                            "name": "E400",
                            "value": "e400"
                        },
                        {
                            "name": "E404",
                            "value": "e404"
                        },
                        {
                            "name": "ORDER_ACTIVATED",
                            "value": "order_activated"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enum/error.enum.ts"
                },
                {
                    "name": "EErrorMessage",
                    "childs": [
                        {
                            "name": "e400",
                            "value": "aiueo"
                        },
                        {
                            "name": "order_activated",
                            "value": "Order Activated"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enum/error.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app.routing.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "IndexComponent"
                    },
                    {
                        "path": "form",
                        "component": "FormComponent"
                    },
                    {
                        "path": "account",
                        "component": "AccountIndexComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/builder/firestore-query.builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FirestoreQueryBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/builder/firestore-query.builder.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderByOp",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/builder/firestore-query.builder.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WhereOp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/checkbox/checkbox.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CheckboxService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/option/option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/radiobox/radiobox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/radiobox/radiobox.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RadioboxService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/text/text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atom/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/account-edit/account-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/account-edit/state/account-edit.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountEditQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/account-edit/state/account-edit.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountEditService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/account-edit/state/account-edit.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountEditStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/account-edit/state/account-edit.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccountEditState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/account-edit/state/account-edit.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/login/state/login.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/login/state/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/login/state/login.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/login/state/login.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/login/state/login.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/signin/signin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SigninComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/signin/state/signin.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SigninQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/signin/state/signin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SigninService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/signin/state/signin.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SigninStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/signin/state/signin.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SigninState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/signin/state/signin.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/state/modal.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/state/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/state/modal.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/state/modal.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModalState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/modal/state/modal.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/option.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OptionService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/account-index/account-index.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountIndexComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/account-index/state/account-index.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountIndexQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/account-index/state/account-index.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountIndexService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/account-index/state/account-index.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountIndexStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/account-index/state/account-index.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccountIndexState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/account-index/state/account-index.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/form/state/form.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/form/state/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/form/state/form.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/form/state/form.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/form/state/form.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/index/index.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IndexComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/index/state/index.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IndexQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/index/state/index.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IndexService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/index/state/index.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IndexStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/index/state/index.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IndexState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/page/index/state/index.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/template/modal-layout/modal-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/component/template/modal-layout/modal-layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalLayoutService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptor/custom.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "CustomInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/account.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAccount",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/model/account.model.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/model/firestore.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFirestore",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/model/firestore.model.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createFirestore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/model/mail.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMail",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/model/option.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/bin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BinService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/service/fireauth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FireauthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/service/firestore.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FirestoreService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/service/sentry.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SentryService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}